\name{predict.SL.step.interaction_boost}
\alias{predict.SL.step.interaction_boost}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
Prediction Method for SL.step.interaction_boost Objects
}
\description{
This function provides a prediction method for objects of class \code{SL.step.interaction_boost}, which are fitted models using stepwise interactions with boosting, wrapped within the \code{SuperLearner} framework. It uses the fitted model to generate predictions on new data.
}
\usage{
\method{predict}{SL.step.interaction_boost}(object, newdata, ...)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{object}{
A fitted object of class \code{SL.step.interaction_boost}, typically produced by the \code{SL.step.interaction_boost} function within the \code{SuperLearner} framework.
}
  \item{newdata}{
  A \code{data.frame} of new observations on which to obtain predictions. 
}
  \item{\dots}{
Additional arguments (currently not used).
}
}
\value{
A \code{numeric} vector of predicted values corresponding to the rows in \code{newdata}. The predictions are generated by the fitted model contained within the \code{SL.step.interaction_boost} object.
}
\references{
R Documentation for \code{glm}: \url{https://stat.ethz.ch/R-manual/R-devel/library/stats/html/glm.html}

R Documentation for \code{step}: \url{https://stat.ethz.ch/R-manual/R-devel/library/stats/html/step.html}

SuperLearner Package: \url{https://cran.r-project.org/package=SuperLearner}
}
\author{
  Original authors of the \code{glm} and \code{step} package: see reference above.

  Michael Schomaker, Philipp Baumann, Han Bao, Katharina Ring, Christoph Wiederkehr
}
\note{
Ensure that the \code{object} provided is a valid \code{SL.step.interaction_boost} object, as this function specifically relies on the structure of the model fitted by the \code{SL.step.interaction_boost} function.
}

\seealso{
\code{\link{SL.step.interaction_boost}}, \code{\link[SuperLearner]{SuperLearner}}
}
\examples{
data(EFV)
result <- SL.step.interaction_boost(Y = EFV[, "VL.1"], X = EFV[, c("efv.0", "metabolic", "weight.0")], 
                                    newX = EFV[, c("efv.0", "metabolic", "weight.0")], family = stats::binomial())
predict(object = result$fit, newdata = EFV[, c("efv.0", "metabolic", "weight.0")])
}
\keyword{regression}
\keyword{classification}
\concept{SuperLearner}
